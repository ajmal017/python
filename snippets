\\in0-fileri03\in_win_share-E\PROJECTS\FWS_IMA_EYY\05_Working\Sweta\krishna

#pip proxy options
pip install requests --trusted-host pypi.python.org --proxy username:Password@proxy:port

#snippet to print exception line number in python
try:
#some code
pass
except Exception as ex3:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            self._logmessage("decode_error_message " + str(exc_tb.tb_lineno))        
            
#snippet to trace the line number in python
# taken from http://www.dalkescientific.com/writings/diary/archive/2005/04/20/tracing_python_code.html
import sys
def traceit(frame, event, arg):
    if event == "line":
        lineno = frame.f_lineno
        print "line", lineno

    return traceit
def main():
    print "In main"
    for i in range(5):
        print i, i*3
    print "Done."
    

sys.settrace(traceit)
main()

#Favouite genetic algorithm introduction
#https://www.codeproject.com/Articles/1104747/Introduction-to-Genetic-Algorithms-with-Python-Hel
#https://lethain.com/genetic-algorithms-cool-name-damn-simple/

#backtrack
#https://secweb.cs.odu.edu/~zeil/cs361/web/website/Lectures/styles/pages/ar01s04s03.html
#https://stackoverflow.com/questions/12190523/algorithm-to-create-my-personal-school-schedule

#snippet for timit decorator
def timeit(method):

    def timed(*args, **kw):
        ts = time.time()
        result = method(*args, **kw)
        te = time.time()

        print '%r (%r, %r) %2.2f sec' % \
              (method.__name__, args, kw, te-ts)
        return result

    return timed

@timeit
def test1():
      j = [i for i in range(12345678)]
      
      
      
import itertools
x = [1, 2, 3, 4, 5, 6]
[p for p in itertools.product(x, repeat=2)]
[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 1), (2, 2), (2, 3), 
 (2, 4), (2, 5), (2, 6), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), 
 (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (5, 1), (5, 2), (5, 3), 
 (5, 4), (5, 5), (5, 6), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6)]

#clear python console
import os
clear = lambda: os.system('cls')
clear()

---get the current ruuning file path----
fwcFloderPath = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
uiPath = os.path.join(fwcFloderPath, 'ui', 'dfcGui.ui')

--get the nearest value (can be used for date or number)
def nearest(items, pivot):
        return min(items, key=lambda x: abs(x - pivot))

----pandas-----
#get the nearest number in column
result = result.iloc[(result['RH']-400).abs().argsort()[:1]]

#sytnax to access a particular row and column in pandas
df.iloc[<row index>, param_groupdf.columns.get_loc('columns name')] = asignvalue
param_groupdf.iloc[0, param_groupdf.columns.get_loc('columns name')] = asignvalue

#add dataframe at the end
param_groupdf = param_groupdf.append(param_groupdf.tail(1))
 
#check whther a series contains the string
if(True in (param_groupdf["Sign"].str.contains('Y', regex=False).values)):
 
 
#pandas create empty data frame without column names and add rows

	
# Create an completely empty Dataframe without any column names, indices or data
dfObj = pd.DataFrame()
dfObj['UserName'] = ['Riti', 'Aadi', 'Jack']
dfObj['Name'] = ['Riti', 'Aadi', 'Jack']
dfObj['Name'] = ['Riti', 'Aadi', 'Jack']
 
print("Dataframe Contents ", dfObj, sep='\n')

the above is from the following website
https://thispointer.com/pandas-how-to-create-an-empty-dataframe-and-append-rows-columns-to-it-in-python/
